namespace PTV.ExternalData.Pharmacy

open FSharp.Data

// This file contains type definitions used in the rest of the AWS lambda function.
// If you want to know how the F# code works, start in the Function.fs file.

/// A static type for the pharmacies XML dynamically generated by FSharp.Data.
type PharmaciesXml = XmlProvider<"./Resources/Pharmacies.xml">

/// A static type for the Open API service location json, dynamically generated by FSharp.Data. 
type ServiceLocationJson = JsonProvider<"./Resources/ServiceLocationV11Post.json", RootName="serviceLocation">

/// A static type for the Open API channels of organization json, dynamically generated by FSharp.Data.
type OrganizationServiceChannelJson = JsonProvider<"./Resources/OrganizationServiceChannel.json", RootName="page">

/// A static type for the PAHA token response json, dynamically generated by FSharp.Data.
type LoginResponseJson = JsonProvider<"./Resources/LoginResponse.json", RootName="response">

/// A static type for the AWS SecretsManager json, dynamically generated by FSharp.Data.
type SecretsJson = JsonProvider<"./Resources/Secrets.json", RootName="Secret">

/// A static type for PAHA token request, dynamically generated by FSharp.Data.
type LoginRequestJson = JsonProvider<"./Resources/LoginRequest.json", RootName="request">

/// A discriminated union of week days.
/// In F#, discriminated union is a special type, that does not have a direct equivalent in C#.
/// It can be thought as something between Enum and Inheritance (abstract parent class and concrete subclasses).
type Weekday =
  | Monday
  | Tuesday
  | Wednesday
  | Thursday
  | Friday
  | Saturday
  | Sunday
  
/// A record (immutable class) for opening hours with possibly empty fields (option).
/// In F#, there are several data structures. Records are the closest equivalent to C# classes.
/// Here is a rough comparison:
/// F#                  -  C#
/// module              -  static class, containing bunch of public static methods
/// record              -  class, but immutable and not supporting inheritance
/// tuple               -  value tuple
/// discriminated union -  something between Enum and inherited classes
type OpeningTimeOption =
  {
    DayFrom: Weekday option;
    TimeFrom: string option;
    DayTo: Weekday option;
    TimeTo: string option;
  }
  
/// A record for opening hours with all fields specified (nothing it empty, null or None).
type OpeningTimeValue =
  {
    DayFrom: Weekday;
    TimeFrom: string;
    DayTo: Weekday;
    TimeTo: string;
  }

