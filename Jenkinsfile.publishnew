def map = [
  openapi: "PTV.Application.OpenApi",
  uiapi: "PTV.Application.Api",
  scheduler: "PTV.TaskScheduler",
  web: "PTV.Application.Web",
  sts: "PTV.IdentityUserManager",
  console: "PTV.DataImport.Console"]

def branch = params.BRANCH.toLowerCase()
def artifactoryPrefix = 'dev'

// Conditionally define a variable 'artifactoryPrefix'
if (branch == 'ptv_test') {
  artifactoryPrefix = "test"
} else if (branch.startsWith('release')) {
  artifactoryPrefix = "rel"
}

pipeline {
  agent {
    label 'ptv'
  }

  environment {
    artifactory = "ptv-docker-virtual.vrk-artifactory-01.eden.csc.fi"
    FLOW_TOKEN = credentials('flowdock-ci-flow-token')
  }

  stages {
    stage("checkout") {
      steps {
        sh """
        echo "Downloading from bitbucket"
        """
        checkout scm
      }
    }

    stage("restore") {
      steps {
        script {
          sh """
          echo "Running dotnet restore"
          dotnet restore PTV.sln
          """.stripMargin()
        }
      }
    }

    stage("installing node modules") {
      when {
        expression { return params.PTV_MODULES.contains('web') }
      }
      steps {
        nodejs('NodeJS auto-install 10.10.0') {
          script {
            sh """
            echo "Installing node modules"
            cd src/${map['web']}
            yarn
            cd ../..
            """.stripMargin()
          }
        }
      }
    }
    stage("publishing modules") {
      environment {
        versionNumber = VersionNumber(
          projectStartDate: '1970-01-01',
          versionNumberString: '${BUILD_YEAR}${BUILD_MONTH, XX}${BUILD_DAY, XX}.${BUILDS_TODAY}',
          worstResultForIncrement: 'SUCCESS'
        )
        versionString = "${params.RELEASE_NUMBER != null && params.RELEASE_NUMBER != '' ? params.RELEASE_NUMBER : env.versionNumber}"
      }
      steps {
        nodejs('NodeJS auto-install 10.10.0') {
          script {
            params.PTV_MODULES.tokenize(',').each { module ->
              sh """
              echo "Publishing ${map[module]}"
              dotnet publish ./src/${map[module]} -c Release -o publish/${module}
              echo '{"BuildNumber":"'${versionString}'", "ReleaseNumber":"'${versionString}'"}' > publish/${module}/version.json
              """.stripMargin()
            }
          }
        }
      }
    }
    stage("delete old containers") {
      agent {
        docker {
          image 'ops-dev-docker-local.vrk-artifactory-01.eden.csc.fi/dvv-tools:v1.2.0'
          registryUrl 'https://ops-dev-docker-local.vrk-artifactory-01.eden.csc.fi'
          registryCredentialsId '6df71b82-ca6e-4990-a985-add558f923aa'
        }
      }
      when {
        expression { return artifactoryPrefix != 'rel' }
      }
      steps {
        withCredentials([usernamePassword(credentialsId: '6df71b82-ca6e-4990-a985-add558f923aa', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
          script {
            params.PTV_MODULES.tokenize(',').each { module ->
              sh """
              echo "Username ${USERNAME}"
              curl -u ${USERNAME}:${PASSWORD} -X DELETE "https://vrk-artifactory-01.eden.csc.fi/ptv-docker-local/ptv-${artifactoryPrefix}-${module}"
              """.stripMargin()
            }
          }
        }
      }
    }
    stage("delete old containers for GeoServer") {
      agent {
        docker {
          image 'ops-dev-docker-local.vrk-artifactory-01.eden.csc.fi/dvv-tools:v1.2.0'
          registryUrl 'https://ops-dev-docker-local.vrk-artifactory-01.eden.csc.fi'
          registryCredentialsId '6df71b82-ca6e-4990-a985-add558f923aa'
        }
      }
      when {
        expression { return artifactoryPrefix != 'rel' && params.GEOSERVER}
      }
      steps {
        withCredentials([usernamePassword(credentialsId: '6df71b82-ca6e-4990-a985-add558f923aa', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
          script {
              sh """
              echo "Username ${USERNAME}"
              curl -u ${USERNAME}:${PASSWORD} -X DELETE "https://vrk-artifactory-01.eden.csc.fi/ptv-docker-local/ptv-${artifactoryPrefix}-geoserver"
              """.stripMargin()
          }
        }
      }
    }
    stage("docker build and publish") {
      environment {
        imageName = "${params.RELEASE_NUMBER != null && params.RELEASE_NUMBER != '' ? params.RELEASE_NUMBER : env.BUILD_NUMBER}"
      }
      steps {
        script{
          params.PTV_MODULES.tokenize(',').each { module ->
            withDockerRegistry(credentialsId: '6df71b82-ca6e-4990-a985-add558f923aa', url: "https://${artifactory}/v1") {
              sh """
                echo "Image name: ${imageName}"
                docker build -t ${artifactory}/ptv-${artifactoryPrefix}-${module}:${imageName} --pull=true --file=src/${map[module]}/Dockerfile .
                docker tag ${artifactory}/ptv-${artifactoryPrefix}-${module}:${imageName} ${artifactory}/ptv-${artifactoryPrefix}-${module}:latest
                docker push ${artifactory}/ptv-${artifactoryPrefix}-${module}:${imageName}
                docker push ${artifactory}/ptv-${artifactoryPrefix}-${module}:latest
              """.stripMargin()
            }
          }
        }
      }
    }
    stage("docker GeoServer") {
      environment {
        imageName = "${params.RELEASE_NUMBER != null && params.RELEASE_NUMBER != '' ? params.RELEASE_NUMBER : env.BUILD_NUMBER}"
      }
      when {
        expression { return params.GEOSERVER}
      }
      steps {
        script{
          withDockerRegistry(credentialsId: '6df71b82-ca6e-4990-a985-add558f923aa', url: "https://${artifactory}/v1") {
            sh """
              echo "Image name: ${imageName}"
              cd thirdParty/GeoServer
              docker build -t ${artifactory}/ptv-${artifactoryPrefix}-geoserver:${imageName} --pull=true .
              docker tag ${artifactory}/ptv-${artifactoryPrefix}-geoserver:${imageName} ${artifactory}/ptv-${artifactoryPrefix}-geoserver:latest
              docker push ${artifactory}/ptv-${artifactoryPrefix}-geoserver:${imageName}
              docker push ${artifactory}/ptv-${artifactoryPrefix}-geoserver:latest
            """.stripMargin()
          }
        }
      }
    }
  }
  post {
    cleanup {
      cleanWs()
    }
    failure {
      mail to: "jan.bulava@tieto.com, david.mamula@tieto.com, tomas.dlouhy@tieto.com, jaroslav.bliznak@tieto.com, lubomir.sokolovsky@tieto.com",
        subject: "Jenkins build FAILED -> $JOB_BASE_NAME",
        body: "See: $BUILD_URL (Branch: $BRANCH, Modules: ${params.PTV_MODULES})"
      script {
        sh '''
          generate_post_data()
{
cat <<EOF
{
  "flow_token": "$FLOW_TOKEN",
  "event": "message",
  "content": ":boom: [$JOB_NAME-$BUILD_NUMBER **failed**]($BUILD_URL) Branch: *$BRANCH* Modules: *$PTV_MODULES*",
  "tags": ["$JOB_BASE_NAME", "$NODE_NAME"]
}
EOF
}
          curl -i -X POST -H "Content-Type: application/json" -d "$(generate_post_data)" "https://api.flowdock.com/messages"
        '''.stripMargin()
      }
    }
    fixed {
      mail to: "jan.bulava@tieto.com, david.mamula@tieto.com, tomas.dlouhy@tieto.com, jaroslav.bliznak@tieto.com, lubomir.sokolovsky@tieto.com",
        subject: "Jenkins build FIXED -> $JOB_BASE_NAME",
        body: "See: $BUILD_URL (Branch: $BRANCH, Modules: ${params.PTV_MODULES})"
      script {
        sh '''
          generate_post_data()
{
cat <<EOF
{
  "flow_token": "$FLOW_TOKEN",
  "event": "message",
  "content": ":four_leaf_clover: [$JOB_NAME-$BUILD_NUMBER **fixed**]($BUILD_URL) Branch: *$BRANCH* Modules: *$PTV_MODULES*",
  "tags": ["$JOB_BASE_NAME", "$NODE_NAME"]
}
EOF
}
          curl -i -X POST -H "Content-Type: application/json" -d "$(generate_post_data)" "https://api.flowdock.com/messages"
        '''.stripMargin()
      }
    }
  }
}
