def branch = params.BRANCH.toLowerCase()
def deployEnv = params.DEPLOY_ENV && params.DEPLOY_ENV.toLowerCase()
def artifactoryPrefix = 'dev'
def awsAccountId = '192094005843'
def awsAccountName = 'dvv-ptv-dev'
def awsIdVariable = 'jenkins-aws-secret-key-id'
def awsKeyVariable = 'jenkins-aws-secret-access-key'

// Conditionally define a variable 'deployEnv'
if (branch == 'ptv_test') {
  artifactoryPrefix = "test"
  awsAccountId = '851039583788'
  awsAccountName = 'dvv-ptv-test'
  awsIdVariable = 'AWS_SECRET_ID_TEST'
  awsKeyVariable = 'AWS_SECRET_KEY_TEST'
} else if (branch.startsWith('release')) {
  if (deployEnv == 'dev') {
    artifactoryPrefix = "rel"
  }
  else if (deployEnv == 'test'){
    artifactoryPrefix = "rel"
    awsAccountId = '851039583788'
    awsAccountName = 'dvv-ptv-test'
    awsIdVariable = 'AWS_SECRET_ID_TEST'
    awsKeyVariable = 'AWS_SECRET_KEY_TEST'
  }
  else if (deployEnv == 'qa') {
    artifactoryPrefix = "rel"
    awsAccountId = '332228932225'
    awsAccountName = 'dvv-ptv-qa'
    awsIdVariable = 'AWS_SECRET_ID_QA'
    awsKeyVariable = 'AWS_SECRET_KEY_QA'
  } 
  else if (deployEnv == 'trn') {
    artifactoryPrefix = "rel"
    awsAccountId = '411759003706'
    awsAccountName = 'dvv-ptv-training'
    awsIdVariable = 'AWS_SECRET_ID_TRN'
    awsKeyVariable = 'AWS_SECRET_KEY_TRN'
  } 
  else if (deployEnv == 'prod') {
    artifactoryPrefix = "rel"
    awsAccountId = '517933981179'
    awsAccountName = 'dvv-ptv-prod'
    awsIdVariable = 'AWS_SECRET_ID_PROD'
    awsKeyVariable = 'AWS_SECRET_KEY_PROD'
  }
}

pipeline {
  agent {
    label 'ptv'
  }

  environment {
    artifactory = "ptv-docker-virtual.vrk-artifactory-01.eden.csc.fi"
    ecr = "${awsAccountId}.dkr.ecr.eu-west-1.amazonaws.com"
    versionNumber = VersionNumber(
      projectStartDate: '1970-01-01',
      versionNumberString: '${BUILD_YEAR}${BUILD_MONTH, XX}${BUILD_DAY, XX}.${BUILDS_TODAY}',
      worstResultForIncrement: 'SUCCESS'
    )
    versionString = "${params.RELEASE_NUMBER != null && params.RELEASE_NUMBER != '' ? params.RELEASE_NUMBER : env.versionNumber}"
    imageName = "${params.RELEASE_NUMBER != null && params.RELEASE_NUMBER != '' ? params.RELEASE_NUMBER : 'latest'}"
    FLOW_TOKEN = credentials('flowdock-ci-flow-token')
  }

  stages {
    stage("Login to ECR") {
      agent {
        docker {
          image 'ops-dev-docker-local.vrk-artifactory-01.eden.csc.fi/dvv-tools:v1.2.0'
          registryUrl 'https://ops-dev-docker-local.vrk-artifactory-01.eden.csc.fi'
          registryCredentialsId '6df71b82-ca6e-4990-a985-add558f923aa'
        }
      }

      steps {
        withCredentials([usernamePassword(credentialsId: "${awsAccountName}", passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
          script {
            ecrlogin = sh returnStdout: true, script: """
            assume-role arn:aws:iam::${awsAccountId}:role/Jenkins aws ecr get-login --no-include-email --region eu-west-1
            """
          }
        }
      }
    }

    stage("Push container to ECR") {
      steps {
        script {
          params.PTV_MODULES.tokenize(',').each { module ->
            sh """
              echo "Processing module ${module}"
              docker pull ${artifactory}/ptv-${artifactoryPrefix}-${module}:${imageName}
              eval ${ecrlogin}
              docker tag ${artifactory}/ptv-${artifactoryPrefix}-${module}:${imageName} ${ecr}/ptv-${module}:${versionString}_${BUILD_NUMBER}
              docker push ${ecr}/ptv-${module}:${versionString}_${BUILD_NUMBER}
              docker tag ${artifactory}/ptv-${artifactoryPrefix}-${module}:${imageName} ${ecr}/ptv-${module}:latest
              docker push ${ecr}/ptv-${module}:latest
            """.stripMargin()
          }
        }
      }
    }

    stage('Remove console jobs if any') {
      when {
        beforeAgent true
        expression { return params.PTV_MODULES.contains('console') }
      }
      agent {
        docker {
          image 'ops-dev-docker-local.vrk-artifactory-01.eden.csc.fi/dvv-tools:v1.2.0'
          registryUrl 'https://ops-dev-docker-local.vrk-artifactory-01.eden.csc.fi'
          registryCredentialsId '6df71b82-ca6e-4990-a985-add558f923aa'
        }
      }
      steps {
        withCredentials([usernamePassword(credentialsId: "${awsAccountName}", passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
          script {
            sh """
              assume-role arn:aws:iam::${awsAccountId}:role/Jenkins aws eks --region eu-west-1 update-kubeconfig --name EKS-Cluster --kubeconfig kube.config
              CONSOLE_JOB_COUNT=`assume-role arn:aws:iam::${awsAccountId}:role/Jenkins kubectl --kubeconfig kube.config get jobs -l app=ptv-console | grep -c ptv-console` || true
              echo "Console pod count: \$CONSOLE_JOB_COUNT"
              if [ \$CONSOLE_JOB_COUNT != 0 ]
                then
                  echo "Deleting console jobs..."
                  assume-role arn:aws:iam::${awsAccountId}:role/Jenkins kubectl --kubeconfig kube.config delete jobs -l app=ptv-console
              fi
            """.stripMargin()
          }
        }
      }
    }

    stage('Deploy application to Kubernetes') {
      agent {
        docker {
          image 'ops-dev-docker-local.vrk-artifactory-01.eden.csc.fi/dvv-tools:v1.2.0'
          registryUrl 'https://ops-dev-docker-local.vrk-artifactory-01.eden.csc.fi'
          registryCredentialsId '6df71b82-ca6e-4990-a985-add558f923aa'
        }
      }
      steps {
        withCredentials([usernamePassword(credentialsId: "${awsAccountName}", passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
          script {
            params.PTV_MODULES.tokenize(',').each { module ->
              sh """
                cd k8s/overlays/${awsAccountName}/${module}
                sed -i'' -e "s|newTag: '${module}-tag'|newTag: '${versionString}_${BUILD_NUMBER}'|" kustomization.yaml
                assume-role arn:aws:iam::${awsAccountId}:role/Jenkins aws eks --region eu-west-1 update-kubeconfig --name EKS-Cluster --kubeconfig kube.config
                assume-role arn:aws:iam::${awsAccountId}:role/Jenkins kubectl --kubeconfig kube.config apply -k .
                cd ../../../..
              """.stripMargin()
            }
          }
        }
      }
    }
  }
  post {
    cleanup {
      cleanWs()
    }
    failure {
      mail to: "jan.bulava@tieto.com, david.mamula@tieto.com, tomas.dlouhy@tieto.com, jaroslav.bliznak@tieto.com, lubomir.sokolovsky@tieto.com",
        subject: "Jenkins build FAILED -> $JOB_BASE_NAME",
        body: "See: $BUILD_URL (Branch: $BRANCH, Modules: ${params.PTV_MODULES})"
      script {
        sh '''
          generate_post_data()
{
cat <<EOF
{
  "flow_token": "$FLOW_TOKEN",
  "event": "message",
  "content": ":boom: [$JOB_NAME-$BUILD_NUMBER **failed**]($BUILD_URL) Branch: *$BRANCH* Modules: *$PTV_MODULES*",
  "tags": ["$JOB_BASE_NAME", "$NODE_NAME"]
}
EOF
}
          curl -i -X POST -H "Content-Type: application/json" -d "$(generate_post_data)" "https://api.flowdock.com/messages"
        '''.stripMargin()
      }
    }
    fixed {
      mail to: "jan.bulava@tieto.com, david.mamula@tieto.com, tomas.dlouhy@tieto.com, jaroslav.bliznak@tieto.com, lubomir.sokolovsky@tieto.com",
        subject: "Jenkins build FIXED -> $JOB_BASE_NAME",
        body: "See: $BUILD_URL (Branch: $BRANCH, Modules: ${params.PTV_MODULES})"
      script {
        sh '''
          generate_post_data()
{
cat <<EOF
{
  "flow_token": "$FLOW_TOKEN",
  "event": "message",
  "content": ":four_leaf_clover: [$JOB_NAME-$BUILD_NUMBER **fixed**]($BUILD_URL) Branch: *$BRANCH* Modules: *$PTV_MODULES*",
  "tags": ["$JOB_BASE_NAME", "$NODE_NAME"]
}
EOF
}
          curl -i -X POST -H "Content-Type: application/json" -d "$(generate_post_data)" "https://api.flowdock.com/messages"
        '''.stripMargin()
      }
    }
  }
}
