<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System" #>
<#@ assembly name="EnvDTE"#>
<#@ assembly name="EnvDTE80" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ include file="$(SolutionDir)EF.Utility.CS.ttinclude"#>
<#this.PTV_VSHelper = new DNXCustomHelper(this.Host);#>
<#+
void WriteHeader(params string[] extraUsings)
{#>//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;

<#+
if (extraUsings != null)
{#>
<#=String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+}
}
	void BeginNamespace(string namespaceName, CodeGenerationTools code)
	{
		CodeRegion region = new CodeRegion(this);
		if (!String.IsNullOrEmpty(namespaceName))
	{
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+PushIndent(CodeRegion.GetIndent(1));
		}
	}
	void EndNamespace(string namespaceName)
	{
		if (!String.IsNullOrEmpty(namespaceName))
		{
	PopIndent();
	#>
}
	<#+
		}
	}

public DNXCustomHelper PTV_VSHelper;

public class DNXCustomHelper
{
    public ITextTemplatingEngineHost Host { get; private set; }
    private EnvDTE.DTE dte;
    private IServiceProvider hostServiceProvider;

    public DNXCustomHelper(object host)
    {
        this.Host = host as ITextTemplatingEngineHost;
        this.hostServiceProvider = (IServiceProvider)this.Host;
        this.dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
    }

    public EnvDTE.Project GetProjectOfCurrentFile()
    {
        return dte.Solution.FindProjectItem(this.Host.TemplateFile).ContainingProject;
    }

    public string GetProjectDirectoryOfCurrentFile()
    {
        return System.IO.Path.GetDirectoryName(GetProjectOfCurrentFile().FullName);
    }

    public string GetSolutionDirectory()
    {
        return System.IO.Path.GetDirectoryName(dte.Solution.FullName);
    }

    public string GetProjectDirectory(EnvDTE.Project project)
    {
        return System.IO.Path.GetDirectoryName(project.FullName);
    }

    public IEnumerable<string> GetInputFiles(string path)
    {
        var folderPath = GetSolutionDirectory() + @"\src\" + path;
        var files = Directory.GetFiles(folderPath, "*.cs")
            .Select(x => x.Substring(x.LastIndexOf(@"\") + 1))
            .Select(x => x.Substring(0, x.IndexOf(@".cs")));
        return files;
    }
}
#>