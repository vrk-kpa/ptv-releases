pipeline {
  agent {
    label 'ptv'
  }

  environment {
    awsAccountId          = "192094005843"
    artifactory           = "ptv-docker-virtual.vrk-artifactory-01.eden.csc.fi"
    AWS_ACCESS_KEY_ID     = credentials('jenkins-aws-secret-key-id')
    AWS_SECRET_ACCESS_KEY = credentials('jenkins-aws-secret-access-key')
    FLOW_TOKEN            = credentials('flowdock-ci-flow-token')
    ecr                   = "192094005843.dkr.ecr.eu-west-1.amazonaws.com"
    versionNumber = VersionNumber(
      projectStartDate: '1970-01-01',
      versionNumberString: '${BUILD_YEAR}${BUILD_MONTH, XX}${BUILD_DAY, XX}.${BUILDS_TODAY}',
      worstResultForIncrement: 'SUCCESS'
    )
  }

  stages {
    stage("checkout") {
      steps {
        sh """
        echo "Downloading from bitbucket"
        """
        checkout scm
      }
    }

    stage("restore") {
      steps {
        script {
          sh """
          echo "Running dotnet restore"
          dotnet restore src/PTV.DataImport.Console
          """.stripMargin()
        }
      }
    }

    stage("publishing console") {
      steps {
        script {
          sh """
          echo "Publishing PTV.DataImport.Console"
          dotnet publish ./src/PTV.DataImport.Console -c Release -o publish/console
          """.stripMargin()
        }
      }
    }

    stage("delete old console") {
      agent {
        docker {
          image 'ops-dev-docker-local.vrk-artifactory-01.eden.csc.fi/dvv-tools:v1.2.0'
          registryUrl 'https://ops-dev-docker-local.vrk-artifactory-01.eden.csc.fi'
          registryCredentialsId '6df71b82-ca6e-4990-a985-add558f923aa'
        }
      }

      steps {
        withCredentials([usernamePassword(credentialsId: '6df71b82-ca6e-4990-a985-add558f923aa', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
          script {
            sh """
            echo "Username ${USERNAME}"
            curl -u ${USERNAME}:${PASSWORD} -X DELETE "https://vrk-artifactory-01.eden.csc.fi/ptv-docker-local/ptv-dev-console"
            """.stripMargin()
          }
        }
      }
    }

    stage("docker build and publish") {
      steps {
        script{
          withDockerRegistry(credentialsId: '6df71b82-ca6e-4990-a985-add558f923aa', url: "https://${artifactory}/v1") {
            sh """
              echo "Build number: dev_${BUILD_NUMBER}"
              docker build -t ${artifactory}/ptv-dev-console:dev_${BUILD_NUMBER} --pull=true --file=src/PTV.DataImport.Console/Dockerfile .
              docker tag ${artifactory}/ptv-dev-console:dev_${BUILD_NUMBER} ${artifactory}/ptv-dev-console:latest
              docker push ${artifactory}/ptv-dev-console:dev_${BUILD_NUMBER}
              docker push ${artifactory}/ptv-dev-console:latest
            """.stripMargin()
          }
        }
      }
    }
    
    stage("Login to ECR") {
      agent {
        docker {
          image 'ops-dev-docker-local.vrk-artifactory-01.eden.csc.fi/dvv-tools:v1.2.0'
          registryUrl 'https://ops-dev-docker-local.vrk-artifactory-01.eden.csc.fi'
          registryCredentialsId '6df71b82-ca6e-4990-a985-add558f923aa'
        }
      }

      steps {
        withCredentials([usernamePassword(credentialsId: "dvv-ptv-dev", passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
          script {
            ecrlogin = sh returnStdout: true, script: """
            assume-role arn:aws:iam::${awsAccountId}:role/Jenkins aws ecr get-login --no-include-email --region eu-west-1
            """
          }
        }
      }
    }

    stage("Push container to ECR") {
      steps {
        script {
          sh """
            echo "Processing console"
            docker pull ${artifactory}/ptv-dev-console:latest
            eval ${ecrlogin}
            docker tag ${artifactory}/ptv-dev-console:latest ${ecr}/ptv-console:console-tag-${versionNumber}
            docker push ${ecr}/ptv-console:console-tag-${versionNumber}
            docker tag ${artifactory}/ptv-dev-console:latest ${ecr}/ptv-console:latest
            docker push ${ecr}/ptv-console:latest
          """.stripMargin()
        }
      }
    }

    stage('Deploy application to Kubernetes') {
      agent {
        docker {
          image 'ops-dev-docker-local.vrk-artifactory-01.eden.csc.fi/dvv-tools:v1.2.0'
          registryUrl 'https://ops-dev-docker-local.vrk-artifactory-01.eden.csc.fi'
          registryCredentialsId '6df71b82-ca6e-4990-a985-add558f923aa'
        }
      }
      steps {
        withCredentials([usernamePassword(credentialsId: "dvv-ptv-dev", passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
          script {
            sh """
              cd k8s/overlays/dvv-ptv-dev/console/
              sed -i'' -e "s|newTag: 'console-tag'|newTag: 'console-tag-${versionNumber}'|" kustomization.yaml
              assume-role arn:aws:iam::${awsAccountId}:role/Jenkins aws eks --region eu-west-1 update-kubeconfig --name EKS-Cluster --kubeconfig kube.config
              assume-role arn:aws:iam::${awsAccountId}:role/Jenkins kubectl --kubeconfig kube.config apply -k .
            """.stripMargin()
          }
        }
      }
    }
  }
  post {
    cleanup {
      cleanWs()
    }
    failure {
      mail to: "jan.bulava@tieto.com, david.mamula@tieto.com, tomas.dlouhy@tieto.com, jaroslav.bliznak@tieto.com, lubomir.sokolovsky@tieto.com",
        subject: "Jenkins build FAILED -> $JOB_BASE_NAME",
        body: "See: $BUILD_URL (Branch: $BRANCH, Console)"
      script {
        sh '''
          generate_post_data()
{
cat <<EOF
{
  "flow_token": "$FLOW_TOKEN",
  "event": "message",
  "content": ":boom: [$JOB_NAME-$BUILD_NUMBER **failed**]($BUILD_URL) Branch: *$BRANCH* Console*",
  "tags": ["$JOB_BASE_NAME", "$NODE_NAME"]
}
EOF
}
          curl -i -X POST -H "Content-Type: application/json" -d "$(generate_post_data)" "https://api.flowdock.com/messages"
        '''.stripMargin()
      }
    }
    fixed {
      mail to: "jan.bulava@tieto.com, david.mamula@tieto.com, tomas.dlouhy@tieto.com, jaroslav.bliznak@tieto.com, lubomir.sokolovsky@tieto.com",
        subject: "Jenkins build FIXED -> $JOB_BASE_NAME",
        body: "See: $BUILD_URL (Branch: $BRANCH, Console)"
      script {
        sh '''
          generate_post_data()
{
cat <<EOF
{
  "flow_token": "$FLOW_TOKEN",
  "event": "message",
  "content": ":four_leaf_clover: [$JOB_NAME-$BUILD_NUMBER **fixed**]($BUILD_URL) Branch: *$BRANCH* Console",
  "tags": ["$JOB_BASE_NAME", "$NODE_NAME"]
}
EOF
}
          curl -i -X POST -H "Content-Type: application/json" -d "$(generate_post_data)" "https://api.flowdock.com/messages"
        '''.stripMargin()
      }
    }
  }
}
