def awsAccountId = '192094005843'
def awsAccountName = 'dvv-ptv-dev'

pipeline {
  agent {
    label 'ptv'
  }

  environment {
    artifactory           = "ptv-docker-virtual.vrk-artifactory-01.eden.csc.fi"
    FLOW_TOKEN            = credentials('flowdock-ci-flow-token')
  }

  stages {
    stage("checkout") {
      steps {
        sh """
        echo "Downloading from bitbucket"
        """
        checkout scm
      }
    }

    stage('Remove completed console pods if any') {
      when {
        beforeAgent true
        expression { return params.PTV_MODULES.contains('console') }
      }
      agent {
        docker {
          image 'ops-dev-docker-local.vrk-artifactory-01.eden.csc.fi/dvv-tools:v1.2.0'
          registryUrl 'https://ops-dev-docker-local.vrk-artifactory-01.eden.csc.fi'
          registryCredentialsId '6df71b82-ca6e-4990-a985-add558f923aa'
        }
      }
      steps {
        withCredentials([usernamePassword(credentialsId: "${awsAccountName}", passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
          script {
            sh """
              assume-role arn:aws:iam::${awsAccountId}:role/Jenkins aws eks --region eu-west-1 update-kubeconfig --name EKS-Cluster --kubeconfig kube.config
              CONSOLE_POD_COUNT=`assume-role arn:aws:iam::${awsAccountId}:role/Jenkins kubectl --kubeconfig kube.config get pods -l app=ptv-console | grep -c ptv-console`
              echo "Console pod count: \$CONSOLE_POD_COUNT"
              if [ \$CONSOLE_POD_COUNT != 0 ]
                then
                  echo "Deleting console pods..."
                  assume-role arn:aws:iam::${awsAccountId}:role/Jenkins kubectl --kubeconfig kube.config delete pods -l app=ptv-console
              fi
            """.stripMargin()
          }
        }
      }
    }
  }

  post {
    cleanup {
      cleanWs()
    }
  }
}
