<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.CSharp"#>
<#+
    public class CodeGenerationTools
    {
        private readonly CSharpCodeProvider _code;

        public CodeGenerationTools()
        {            
            _code = new CSharpCodeProvider();  
        }
        
        /// <summary>
        /// Returns a string that is safe for use as an identifier in C#.
        /// Keywords are escaped.
        /// </summary>
        public string Escape(string name)
        {
            return name == null 
                ? null 
                : _code.CreateEscapedIdentifier(name);
        }
        
        /// <summary>
        /// Returns the NamespaceName with each segment safe to
        /// use as an identifier.
        /// </summary>
        public string EscapeNamespace(string namespaceName)
        {
            if (string.IsNullOrEmpty(namespaceName))
            {
                return namespaceName;
            }

            var parts = namespaceName.Split('.');
            namespaceName = string.Empty;
            foreach (var part in parts)
            {
                if (namespaceName != string.Empty)
                {
                    namespaceName += ".";
                }

                namespaceName += Escape(part);
            }

            return namespaceName;
        }

        /// <summary>
        /// Returns the NamespaceName suggested by VS if running inside VS.  Otherwise, returns
        /// null.
        /// </summary>
        public string GetRepositoryNamespace()
        {
            return "PTV.Database.DataAccess.Interfaces.Repositories";
        }

        public string GetSolutionDirectory(string solutionName, string currentDirectoryPath = null)
        {
            while (true)
            {
                if (currentDirectoryPath == null)
                {
                    currentDirectoryPath = Directory.GetCurrentDirectory();
                }

                var directoryInfo = new DirectoryInfo(currentDirectoryPath);
                if (directoryInfo.GetFiles(solutionName).Any())
                {
                    return currentDirectoryPath;
                }

                currentDirectoryPath = Directory.GetParent(currentDirectoryPath).FullName;
            }
        }

        public IEnumerable<string> GetInputFileNames(string directoryPath)
        {
            var directoryInfo = new DirectoryInfo(directoryPath);
            return directoryInfo.GetFiles("*.cs").Select(f => Path.GetFileNameWithoutExtension(f.Name));
        }     
    }
#>