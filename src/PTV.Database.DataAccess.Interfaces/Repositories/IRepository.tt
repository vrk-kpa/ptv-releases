/**
 * The MIT License
 * Copyright (c) 2016 Population Register Centre (VRK)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
<#@ include file="$(SolutionDir)TemplateHelper.ttinclude"#>
<#CodeGenerationTools code = new CodeGenerationTools(this);
string namespaceName = code.VsNamespaceSuggestion();
WriteHeader("System.Collections.Generic", "System.Linq.Expressions");
using Microsoft.EntityFrameworkCore;
BeginNamespace(namespaceName, code);
WriteBaseRepository();
EndNamespace(namespaceName);
#>
<#+
void WriteBaseRepository()
{
#>/// <summary>
/// Base of base repository interface with basic set of methods.
/// </summary>
public interface IRepository
{
}

/// <summary>
/// Base generic repository interface with basic set of methods.
/// </summary>
/// <typeparam name="TEntity">Type of Model class which implements <code>IBasePoco</code>.</typeparam>
public interface IRepository<TEntity> : IRepository
{
    /// <summary>
    /// Returns list of known entities in EF memory
    /// </summary>
    /// <param name="entityState">Specify state of entity which should be returned</param>
    /// <returns>List of known entities in specified state</returns>
    IEnumerable<TEntity> Known(EntityState? entityState = null);       

    /// <summary>
    /// Method select and return all items which are not deleted.
    /// </summary>
    /// <returns>Typed enumerable of items.</returns>
    IQueryable<TEntity> All();

    /// <summary>
    /// Method select and return all items.
    /// </summary>
    /// <param name="deleted">Filter data: <c>true</c> - deleted data, <c>false</c> - undeleted data, <c>null</c> - both</param>
    /// <returns>Typed enumerable of filtered items.</returns>
	IQueryable<TEntity> All(bool? deleted);

	/// <summary>
    /// Method select and return all items which are not deleted.
    /// </summary>
    /// <returns>Typed enumerable of items.</returns>
    IQueryable<TEntity> AllPure();

	/// <summary>
    /// Method select one item by id.
    /// </summary>
    /// <param name="id">Id of item which will be select. Id has to be graeter than 0.</param>
    /// <returns>Return selected item or null.</returns>
    TEntity Get(int id);

	/// <summary>
	/// Creates new instance and add it to context.
	/// </summary>
	/// <returns>Returns brand new instance added to data context.</returns>
	TEntity New();

	/// <summary>
	/// Creates new specified instance and add it to context.
	/// </summary>
	/// <returns>Returns brand new specified instance added to data context.</returns>
	T New<T>() where T : TEntity, new();

	/// <summary>
    /// Method add new item to context.
    /// </summary>
    /// <param name="entity">Item which will be added.</param>
    TEntity Add(TEntity entity);

	/// <summary>
    /// Method remove exist item from context.
    /// </summary>
    /// <param name="entity">Item which will be removed.</param>
    void Remove(TEntity entity);

    /// <summary>
    /// Method remove exist items from context.
    /// </summary>
    /// <param name="entities">Items which will be removed.</param>
    void Remove(IEnumerable<TEntity> entities);

	/// <summary>
    /// Method remove exist item from context.
    /// </summary>
    /// <param name="id">Item Id which will be removed.</param>
	void Remove(int id);

	/// <summary>
    /// Batch insert operation, inserts only own properties (columns) of entity, not navigation
    /// </summary>
    /// <param name="entities">List of entities that should be inserted.</param>
    /// <param name="userName"></param>
    void BatchInsert(IEnumerable<TEntity> entities, string userName);

    /// <summary>
    /// Batch update operation, update only own properties (columns) of entity, not navigation
    /// </summary>
    /// <param name="entities">List of entities that should be inserted.</param>
    /// <param name="isKeyFunc">Returns tru if property should be used in where condition.</param>
    /// <param name="userName"></param>
    void BatchUpdate<T2>(IEnumerable<TEntity> entities, Expression<Func<TEntity, T2>> memberLamda, string userName);

    /// <summary>
    /// Batch update operation, update only own properties (columns) of entity, not navigation
    /// </summary>
    /// <param name="entities">List of entities that should be inserted.</param>
    /// <param name="isKeyFunc">Returns tru if property should be used in where condition.</param>
    /// <param name="userName"></param>
    void BatchUpdate<T2>(TEntity entityData, Expression<Func<TEntity, T2>> memberSetterLamda, TEntity conditionData, Expression<Func<TEntity, T2>> memberConditionLamda, string userName);

	/// <summary>
    /// Batch delete operation without reading entitites.
    /// </summary>
    /// <param name="property">Property which will be checked</param>
	/// <param name="value">Value of property that will be checked and if equals, entity is deleted</param>
    void BatchDelete(Expression<Func<TEntity, object>> property, object value);


    /// <summary>
    /// Delete all data from table
    /// </summary>
    void DeleteAll();
}
<#+
}
#>