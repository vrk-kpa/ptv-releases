/**
 * The MIT License
 * Copyright (c) 2016 Population Register Centre (VRK)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;

using PTV.Database.DataAccess.Interfaces.Repositories;
using PTV.Database.DataAccess.ApplicationDbContext;
using System.Linq.Expressions;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using PTV.Framework;

namespace PTV.Database.DataAccess.Repositories
{
    /// <summary>
    /// Base of base repository interface with basic set of methods.
    /// </summary>
    internal class VRepository : IVRepository
    {
    	private PtvDbContext ptvDbContext;
    
    	/// <summary>
        /// DataContext which is used by this repository instance.
        /// </summary>
        protected PtvDbContext DataContext
        {
            get
            {
                return ptvDbContext;
            }
            set
            {
                ptvDbContext = value;
            }
        }
    
    	#region Ctor
    
        /// <summary>
        /// Default constructor for base repository.
        /// </summary>
        /// <exception cref="ArgumentNullException">When context is null.</exception>
        /// <param name="context">Data context for repository instance.</param>
        public VRepository(PtvDbContext context)
        {
            if (context == null)
            {
                throw new ArgumentNullException("context", "Argument 'context' can not be null!");
            }
    
            DataContext = context;
        }
    
        #endregion Ctor
    }
    
    /// <summary>
    /// Base repository implementation.
    /// </summary>
    /// <typeparam name="TEntity">Model class type.</typeparam>
    internal class VRepository<TEntity> : VRepository, IVRepository<TEntity> where TEntity : class, new()
    {
        private DbQuery<TEntity> dbQuery;
    	private IPrefilteringManager prefilteringManager;
    
        /// <summary>
        /// Collection all items if type <code>TEntity</code>. It is used for add and remove items.
        /// </summary>
        private DbQuery<TEntity> DbQuery
        {
            get
            {
                return dbQuery ?? (dbQuery = DataContext.Query<TEntity>());
            }
        }
    
        #region Ctor
    
        /// <summary>
        /// Default constructor for base repository.
        /// </summary>
        /// <exception cref="ArgumentNullException">When context is null.</exception>
        /// <param name="context">Data context for repository instance.</param>
        /// <param name="prefilteringManager">Prefiltering manager for query filters.</param>
        public VRepository(PtvDbContext context, IPrefilteringManager prefilteringManager)
        		: base(context)
        {
             this.prefilteringManager = prefilteringManager;
        }
    
        #endregion Ctor
        
        #region IRepository
        
        /// <summary>
        /// Method select and return all items which are not deleted and apply all available query filters on them.
        /// </summary>
        /// <returns>Typed enumerable of items.</returns>
        public IQueryable<TEntity> All()
        {
            return DbQuery;
        }
    
    	#endregion IRepository
    }
}
	